/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE  &kp N1  &kp N2     &kp N3    &kp N4        &kp N5                          &kp N6                &kp N7     &kp N8     &kp N9    &kp N0    &kp DELETE
&kp TAB     &kp Q   &kp W      &kp E     &kp R         &kp T                           &kp Y                 &kp U      &kp I      &kp O     &kp P     &kp BSPC
&kp CAPS    &kp A   &kp S      &kp D     &kp F         &kp G                           &kp H                 &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT   &kp Z   &kp X      &kp C     &kp V         &kp B      &kp C_MUTE    &none  &kp N                 &kp M      &kp COMMA  &kp DOT   &kp FSLH  &kp RET
                    &kp LCTRL  &kp LALT  &kp LEFT_WIN  &kp SPACE  &mo 1         &mo 2  &kp LC(LA(LEFT_GUI))  &kp RCTRL  &kp RALT   &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        lower_layer {
            display-name = "lower";

            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp GRAVE       &trans  &trans     &trans  &trans  &trans                    &trans  &trans  &trans  &kp MINUS         &kp EQUAL          &kp DEL
&trans          &trans  &trans     &trans  &trans  &trans                    &trans  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
&trans          &trans  &trans     &trans  &trans  &trans                    &trans  &trans  &trans  &trans            &trans             &trans
&kp LEFT_SHIFT  &trans  &trans     &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans            &trans             &trans
                        &kp GLOBE  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>,
                <&inc_dec_kp LG(LS(LA(EQUAL))) LS(LG(LA(EQUAL)))>;
        };

        raise_layer {
            display-name = "raise";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                    &kp F7      &kp F8            &kp F9    &kp F10     &kp F11        &kp F12
&trans  &trans  &trans  &trans  &trans  &trans                    &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_PP  &kp C_NEXT  &kp PAGE_UP    &kp HOME
&trans  &trans  &trans  &trans  &trans  &trans                    &kp LEFT    &kp DOWN          &kp UP    &kp RIGHT   &kp PAGE_DOWN  &kp END
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans            &trans    &trans      &trans         &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &to 4       &trans            &trans    &trans
            >;
        };

        adjust_layer {
            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // |        | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            display-name = "adjust";
            bindings = <
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                               &none  &none  &none  &none  &none  &none
&ext_power EP_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF                            &none  &none  &none  &none  &none  &none
&none              &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none            &none            &none                                      &none  &none  &none  &none  &none  &none
&none              &none            &none            &none            &none            &none            &rgb_ug RGB_TOG    &none  &none  &none  &none  &none  &none  &none
                                    &none            &none            &none            &none            &none              &none  &none  &none  &none  &none
            >;
        };

        numpad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &kp KP_EQUAL     &kp KP_DIVIDE    &kp LS(KP_ASTERISK)  &kp KP_SUBTRACT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9      &kp KP_PLUS      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6      &kp KP_PLUS      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3      &kp KP_ENTER     &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &tog 4  &kp KP_NUMBER_0  &kp KP_NUMBER_0  &kp KP_DOT           &kp KP_ENTER
            >;

            label = "numpad";
        };
    };
};
